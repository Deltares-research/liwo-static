import path from 'path'
import { generateSelector as selector } from '../../lib/generate-selector'

describe('Maps export', () => {
  beforeEach(() => {
    const url = '/#/viewer/34'
    cy.intercept(new RegExp(/GetMap/), '').as('map')

    cy.visit(url, {
      onBeforeLoad(win) {
        cy.stub(win, 'print')
      },
    })

    cy.get(selector('layer-panel')).should('be.visible')
    cy.wait('@map', { timeout: 4000 })
  })

  it('Prints map', () => {
    // use specific selector because class is generated by plugin
    cy.get('.leaflet-browser-print').click()
    cy.window().its('print').should('be.called')
  })

  it('Exports zip file', () => {
    const fileName = 'test-filename'
    const downloadsFolder = Cypress.config('downloadsFolder')

    cy.intercept(new RegExp(/DownloadZipFileDataLayers/))
      .as('apiCheck')

    cy.wait(1000)

    cy.get(selector('init-export-button'))
      .click()

    cy.get(selector('name-input'))
      .type(fileName)

    cy.get(selector('export-file-button'))
      .click()
      .wait('@apiCheck')
      .should((xhr) => {
        const body = xhr.request.body
        expect(body.name).to.equal(fileName)
      })
      .then(({ response }) => {
        // size in bytes
        const size = Number(response.headers['content-length'])

        expect(size).to.be.greaterThan(5000)
      })

    cy.readFile(path.join(downloadsFolder, `${fileName}.zip`))
      .should('exist')

    cy.get(selector('close-button'))
      .should('not.exist')
  })
})
